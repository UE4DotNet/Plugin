// Copyright 2018 by JCoder58.  See License.txt for license
// Auto-generated --- Do not modify.
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UE4.Core;
using UE4.CoreUObject;
using UE4.CoreUObject.Native;
using UE4.InputCore;
using UE4.Native;

#pragma warning disable CS0108
using UE4.Engine.Native;

namespace UE4.Engine {
    ///<summary>ForceFeedbackComponent allows placing a rumble effect in to the world and having it apply to player characters who come near it</summary>
    public unsafe partial class ForceFeedbackComponent : SceneComponent  {

        ///<summary>Modify the attenuation settings of the component</summary>
        public void AdjustAttenuation(ForceFeedbackAttenuationSettings InAttenuationSettings)  => 
            ForceFeedbackComponent_methods.AdjustAttenuation_method.Invoke(ObjPointer, InAttenuationSettings);

        ///<summary>BP Get Attenuation Settings to Apply</summary>
        public (ForceFeedbackAttenuationSettings, bool) BP_GetAttenuationSettingsToApply()  => 
            ForceFeedbackComponent_methods.BP_GetAttenuationSettingsToApply_method.Invoke(ObjPointer);

        ///<summary>Start a feedback effect playing</summary>
        public void Play(float StartTime)  => 
            ForceFeedbackComponent_methods.Play_method.Invoke(ObjPointer, StartTime);

        ///<summary>Set what force feedback effect is played by this component</summary>
        public void SetForceFeedbackEffect(ForceFeedbackEffect NewForceFeedbackEffect)  => 
            ForceFeedbackComponent_methods.SetForceFeedbackEffect_method.Invoke(ObjPointer, NewForceFeedbackEffect);

        ///<summary>Set a new intensity multiplier</summary>
        public void SetIntensityMultiplier(float NewIntensityMultiplier)  => 
            ForceFeedbackComponent_methods.SetIntensityMultiplier_method.Invoke(ObjPointer, NewIntensityMultiplier);

        ///<summary>Stop playing the feedback effect</summary>
        public void Stop()  => 
            ForceFeedbackComponent_methods.Stop_method.Invoke(ObjPointer);
        ///<summary>The feedback effect to be played</summary>
        public unsafe ForceFeedbackEffect ForceFeedbackEffect {
            get {return ForceFeedbackComponent_ptr->ForceFeedbackEffect;}
        }
        public bool bAutoDestroy {
            get {return Main.GetGetBoolPropertyByName(this, "bAutoDestroy"); }
            set {Main.SetGetBoolPropertyByName(this, "bAutoDestroy", value); }
        }
        public bool bStopWhenOwnerDestroyed {
            get {return Main.GetGetBoolPropertyByName(this, "bStopWhenOwnerDestroyed"); }
            set {Main.SetGetBoolPropertyByName(this, "bStopWhenOwnerDestroyed", value); }
        }
        public bool bLooping {
            get {return Main.GetGetBoolPropertyByName(this, "bLooping"); }
            set {Main.SetGetBoolPropertyByName(this, "bLooping", value); }
        }
        public bool bIgnoreTimeDilation {
            get {return Main.GetGetBoolPropertyByName(this, "bIgnoreTimeDilation"); }
            set {Main.SetGetBoolPropertyByName(this, "bIgnoreTimeDilation", value); }
        }
        public bool bOverrideAttenuation {
            get {return Main.GetGetBoolPropertyByName(this, "bOverrideAttenuation"); }
            set {Main.SetGetBoolPropertyByName(this, "bOverrideAttenuation", value); }
        }
        ///<summary>The intensity multiplier to apply to effects generated by this component</summary>
        public unsafe float IntensityMultiplier {
            get {return ForceFeedbackComponent_ptr->IntensityMultiplier;}
            set {ForceFeedbackComponent_ptr->IntensityMultiplier = value;}
        }
        ///<summary>If bOverrideSettings is false, the asset to use to determine attenuation properties for effects generated by this component</summary>
        public unsafe ForceFeedbackAttenuation AttenuationSettings {
            get {return ForceFeedbackComponent_ptr->AttenuationSettings;}
            set {ForceFeedbackComponent_ptr->AttenuationSettings = value;}
        }
        ///<summary>If bOverrideSettings is true, the attenuation properties to use for effects generated by this component</summary>
        public unsafe ForceFeedbackAttenuationSettings AttenuationOverrides {
            get {return ForceFeedbackComponent_ptr->AttenuationOverrides;}
            set {ForceFeedbackComponent_ptr->AttenuationOverrides = value;}
        }
         //TODO: multicast delegate FOnForceFeedbackFinished OnForceFeedbackFinished
        static ForceFeedbackComponent() {
            StaticClass = Main.GetClass("ForceFeedbackComponent");
        }
        internal unsafe ForceFeedbackComponent_fields* ForceFeedbackComponent_ptr => (ForceFeedbackComponent_fields*) ObjPointer.ToPointer();

        ///<summary>Convert from IntPtr to UObject</summary>
        public static implicit operator ForceFeedbackComponent(IntPtr p) => UObject.Make<ForceFeedbackComponent>(p);
        ///<summary>Get UE4 Class</summary>
        public static Class StaticClass {get; private set;}
        ///<summary>Get UE4 Default Object for this Class</summary>
        public static ForceFeedbackComponent DefaultObject => Main.GetDefaultObject(StaticClass);
        ///<summary>Spawn an object of this class</summary>
        public static ForceFeedbackComponent New(UObject obj = null, Name name = new Name()) => Main.NewObject(StaticClass, obj, name);
    }
}
