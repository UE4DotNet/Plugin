// Copyright 2018 by JCoder58.  See License.txt for license
// Auto-generated --- Do not modify.
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UE4.Core;
using UE4.CoreUObject;
using UE4.CoreUObject.Native;
using UE4.InputCore;
using UE4.Native;

#pragma warning disable CS0108
using UE4.Engine.Native;

namespace UE4.Engine {
    ///<summary>
    ///ALevelScriptActor is the base class for classes generated by
    ///ULevelScriptBlueprints.
    ///</summary>
    ///<remarks>
    ///ALevelScriptActor instances are hidden actors that
    ///exist within a level, and can execute level-wide logic (operating on specific
    ///actor instances within the level). The level-script's functionality is defined
    ///inside the ULevelScriptBlueprint itself (using the blueprint's node-based
    ///interface).
    ///
    ///@see AActor
    ///@see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/Types/LevelBlueprint/index.html
    ///@see ULevelScriptBlueprint
    ///@see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/index.html
    ///@see UBlueprint
    ///</remarks>
    public unsafe partial class LevelScriptActor : Actor  {

        ///<summary>@todo document</summary>
        public event LevelReset_delegate LevelReset;
        public delegate void LevelReset_delegate();
        internal void on_LevelReset() =>
            LevelReset?.Invoke();


        ///<summary>
        ///Event called on world origin location changes
        ///@
        ///</summary>
        ///<remarks>
        ///param       OldOriginLocation       Previous world origin location
        ///@param       NewOriginLocation       New world origin location
        ///</remarks>
        public event WorldOriginLocationChanged_delegate WorldOriginLocationChanged;
        public delegate void WorldOriginLocationChanged_delegate(IntVector OldOriginLocation, IntVector NewOriginLocation);
        internal void on_WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation) =>
            WorldOriginLocationChanged?.Invoke(OldOriginLocation, NewOriginLocation);


        ///<summary>Tries to find an event named "EventName" on all other levels, and calls it</summary>
        public bool RemoteEvent(Name EventName)  => 
            LevelScriptActor_methods.RemoteEvent_method.Invoke(ObjPointer, EventName);

        ///<summary>
        ///Sets the cinematic mode on all PlayerControllers
        ///@
        ///</summary>
        ///<remarks>
        ///param       bInCinematicMode        specify true if the player is entering cinematic mode; false if the player is leaving cinematic mode.
        ///@param       bHidePlayer                     specify true to hide the player's pawn (only relevant if bInCinematicMode is true)
        ///@param       bAffectsHUD                     specify true if we should show/hide the HUD to match the value of bCinematicMode
        ///@param       bAffectsMovement        specify true to disable movement in cinematic mode, enable it when leaving
        ///@param       bAffectsTurning         specify true to disable turning in cinematic mode or enable it when leaving
        ///</remarks>
        public void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning)  => 
            LevelScriptActor_methods.SetCinematicMode_method.Invoke(ObjPointer, bCinematicMode, bHidePlayer, bAffectsHUD, bAffectsMovement, bAffectsTurning);
        public bool bInputEnabled {
            get {return Main.GetGetBoolPropertyByName(this, "bInputEnabled"); }
            set {Main.SetGetBoolPropertyByName(this, "bInputEnabled", value); }
        }
        static LevelScriptActor() {
            StaticClass = Main.GetClass("LevelScriptActor");
            LevelScriptActor_events.LevelReset_event.Setup();
            LevelScriptActor_events.WorldOriginLocationChanged_event.Setup();
        }
        internal unsafe LevelScriptActor_fields* LevelScriptActor_ptr => (LevelScriptActor_fields*) ObjPointer.ToPointer();

        ///<summary>Convert from IntPtr to UObject</summary>
        public static implicit operator LevelScriptActor(IntPtr p) => UObject.Make<LevelScriptActor>(p);
        ///<summary>Get UE4 Class</summary>
        public static Class StaticClass {get; private set;}
        ///<summary>Get UE4 Default Object for this Class</summary>
        public static LevelScriptActor DefaultObject => Main.GetDefaultObject(StaticClass);
        ///<summary>Spawn an object of this class</summary>
        public static LevelScriptActor New(UObject obj = null, Name name = new Name()) => Main.NewObject(StaticClass, obj, name);
    }
}
